##  服务端口
server:
  port: 9004
##  服务名称
spring:
  application:
    name: authentication-center
  sleuth:
    web:
      client:
        enabled: true
    sampler:
      probability: 1.0
  zipkin:
    base-url: http://localhost:9411/
  redis:
    database: 0 # Redis数据库索引（默认为0）
    host: 39.105.40.119  #Redis服务器地址
    port: 6379 # Redis服务器连接端口
    password:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
      #type: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://39.105.40.119:3306/union?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false&useAffectedRows=true
    username: eliteai
    password: wp7706388
    druid:
        # 下面为连接池的补充设置，应用到上面所有数据源中
        # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
        # 配置获取连接等待超时的时间
      maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      validationQueryTimeout: 10000
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
        # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,log4j
      filter:
        wall:
          config:
            enabled: true
            multiStatementAllow: true
            noneBaseStatementAllow: true
        # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 毫秒
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5
        # 合并多个DruidDataSource的监控数据
        #useGlobalDataSourceStat: true
        # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"

        # StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: "false"
        allow:
          #IP黑名单 (存在共同时，deny优先于allow)
        deny:
        login-username: admin
        login-password: admin
        # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      aop-patterns: com.mail.center.service.impl.*
security:
  oauth2:
    resource:
      token-info-uri: http://39.105.40.119:9004/oauth/check_token
      prefer-token-info: true
      jwt:
        keyUri: http://39.105.40.119:9004/oauth/token_key
##  eureka配置
eureka:
  instance:
    prefer-ip-address: true #使用IP注册
    instance-id: ${spring.cloud.client.ip-address}:${center.port}
  client:
    serviceUrl:
      defaultZone: http://admin:123456@39.105.40.119:9000/eureka/
##  日志
logging:
  #config: classpath:logback.xml
  level:
    ROOT: INFO
    com:
      alibaba:
        druid: INFO
      zz:
        auth:
          server: DEBUG
# application:
mybatis:
  mapper-locations: classpath:/mybatis/mapper/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.zz.authentication.center.api.domain.result
#mybatis
mybatis-plus:
  mapper-locations: classpath:mybatis/mapper/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.zz.authentication.center.api.domain.result
  global-config:
    # 数据库相关配置
    db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: AUTO
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      field-strategy: not_empty
      #驼峰下划线转换
      column-underline: true
      #数据库大写下划线转换
      #capital-mode: true
      #逻辑删除配置
      logic-delete-value: 0
      logic-not-delete-value: 1
    #刷新mapper 调试神器
    refresh: true
  # 原生配置
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
pagehelper:
  helperDialect: mysql
  reasonable: false
  supportMethodsArguments: true
  params: count=countSql
system:
#客户端配置
  client:
    clients[0]:
      clientId: lvhaibao
      clientSecret: 123456
    clients[1]:
      clientId: lhb
      clientSecret: 123456
    clients[2]:
      clientId: app
      clientSecret: app
  social:
    qq:
      app-id: wx95c06e11a8b5bbad
      app-secret: xxxx
      providerId: callback.do

    filterProcessesUrl: /api/social
    wei-xin-mini-program:
      app-id: wx95c06e11a8b5bbad
      app-secret: cd1fac28de1a460524018352b0df6bcb